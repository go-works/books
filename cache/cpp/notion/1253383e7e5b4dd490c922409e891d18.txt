2476 1575323999421 httpcache-v1
Method: POST
URL: https://www.notion.so/api/v3/getRecordValues
Body:+110
{
  "requests": [
    {
      "id": "1253383e-7e5b-4dd4-90c9-22409e891d18",
      "table": "block"
    }
  ]
}
Response:+2276
{
  "results": [
    {
      "role": "comment_only",
      "value": {
        "alive": true,
        "content": [
          "fa7814aa-e4e8-4322-9315-2d10e44d5ef8",
          "a52e211a-9190-4f0a-8751-4f660fd95eea",
          "37b9e6a2-b456-4dfa-a1f6-55239d9f1544",
          "04e66f38-cddc-4742-ba48-9803e84f7074",
          "4474fc7a-cb30-4253-b019-d00f295670d4",
          "88cb75c5-50dd-4ad6-8cc7-87976902f8dd",
          "4467222c-2e78-4310-b3f3-e8089e7ec29c",
          "f15e693d-ebbd-4932-8980-a2849aadf2bf",
          "aa050ad3-fd4a-484a-98d6-b5b7302d9a50",
          "e6c2140f-ce69-4f3a-99d8-85bb392a2565",
          "a677e302-4293-4318-95d5-56c690a2c051",
          "80565f73-e202-4122-9d4c-db171b922b6c",
          "06f7b7e4-833f-42db-b7da-a1fe77493c18",
          "081db3be-4e47-4b90-850c-3f3715b95f6d",
          "fd03adef-e425-451b-a8e9-96237686b9f9",
          "63c057cf-c5b4-47db-88be-c90e3848d2ca",
          "5659dace-bdd1-463f-a256-96a4b780e42f",
          "20e5ad8f-8d26-4b8f-a5b0-626b26eb11cb",
          "2cab6b08-cc3b-432c-8829-0e8f47075525",
          "8ca3514d-aac5-40f6-ab6b-c2b083076f90",
          "80c201ef-22e7-4a64-8087-3006e9a42c90",
          "10b75dde-faa7-4c87-97a9-99e96ba9cad1",
          "0ef6ffe2-7285-410c-b0e7-ab5d33e259e1",
          "e05d256c-44fd-4e21-90e5-62b244fa1a0e",
          "2900cd6b-9af4-4e25-8a8f-437f4f2b7cd2"
        ],
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_by_table": "notion_user",
        "created_time": 1550525419525,
        "format": {
          "page_full_width": true,
          "page_small_text": true
        },
        "id": "1253383e-7e5b-4dd4-90c9-22409e891d18",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_by_table": "notion_user",
        "last_edited_time": 1551689221835,
        "parent_id": "f0a4483b-95d9-4c82-8e41-15c96d864674",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Mutexes"
            ]
          ]
        },
        "type": "page",
        "version": 8
      }
    }
  ]
}
49901 1575323999423 httpcache-v1
Method: POST
URL: https://www.notion.so/api/v3/loadPageChunk
Body:+152
{
  "chunkNumber": 0,
  "cursor": {
    "stack": []
  },
  "limit": 50,
  "pageId": "1253383e-7e5b-4dd4-90c9-22409e891d18",
  "verticalColumns": false
}
Response:+49660
{
  "cursor": {
    "stack": []
  },
  "recordMap": {
    "block": {
      "04e66f38-cddc-4742-ba48-9803e84f7074": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_time": 1550525419522,
          "id": "04e66f38-cddc-4742-ba48-9803e84f7074",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_time": 1550525419522,
          "parent_id": "1253383e-7e5b-4dd4-90c9-22409e891d18",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "It is better to use "
              ],
              [
                "std::shared_mutex",
                [
                  [
                    "i"
                  ]
                ]
              ],
              [
                " than "
              ],
              [
                "std::shared_timed_mutex",
                [
                  [
                    "i"
                  ]
                ]
              ],
              [
                "."
              ]
            ]
          },
          "type": "header",
          "version": 1
        }
      },
      "06f7b7e4-833f-42db-b7da-a1fe77493c18": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_time": 1550525419523,
          "id": "06f7b7e4-833f-42db-b7da-a1fe77493c18",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_time": 1550525419523,
          "parent_id": "1253383e-7e5b-4dd4-90c9-22409e891d18",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "Now Let’s look at the implementation of std::shared_timed_mutex."
              ]
            ]
          },
          "type": "text",
          "version": 1
        }
      },
      "081db3be-4e47-4b90-850c-3f3715b95f6d": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550525419524,
          "id": "081db3be-4e47-4b90-850c-3f3715b95f6d",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550525419524,
          "parent_id": "1253383e-7e5b-4dd4-90c9-22409e891d18",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "The code below is MSVC14.1 implementation of std::shared_timed_mutex."
              ]
            ]
          },
          "type": "sub_header",
          "version": 5
        }
      },
      "0ef6ffe2-7285-410c-b0e7-ab5d33e259e1": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_time": 1550525419525,
          "id": "0ef6ffe2-7285-410c-b0e7-ab5d33e259e1",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_time": 1550525419525,
          "parent_id": "1253383e-7e5b-4dd4-90c9-22409e891d18",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "Therefore, the performance difference can be larger."
              ]
            ]
          },
          "type": "text",
          "version": 1
        }
      },
      "10b75dde-faa7-4c87-97a9-99e96ba9cad1": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550525419525,
          "id": "10b75dde-faa7-4c87-97a9-99e96ba9cad1",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550525419525,
          "parent_id": "1253383e-7e5b-4dd4-90c9-22409e891d18",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "In this example, the read / write ratio is the same, but the read rate is more frequent than the write rate in real."
              ]
            ]
          },
          "type": "text",
          "version": 5
        }
      },
      "1253383e-7e5b-4dd4-90c9-22409e891d18": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": [
            "fa7814aa-e4e8-4322-9315-2d10e44d5ef8",
            "a52e211a-9190-4f0a-8751-4f660fd95eea",
            "37b9e6a2-b456-4dfa-a1f6-55239d9f1544",
            "04e66f38-cddc-4742-ba48-9803e84f7074",
            "4474fc7a-cb30-4253-b019-d00f295670d4",
            "88cb75c5-50dd-4ad6-8cc7-87976902f8dd",
            "4467222c-2e78-4310-b3f3-e8089e7ec29c",
            "f15e693d-ebbd-4932-8980-a2849aadf2bf",
            "aa050ad3-fd4a-484a-98d6-b5b7302d9a50",
            "e6c2140f-ce69-4f3a-99d8-85bb392a2565",
            "a677e302-4293-4318-95d5-56c690a2c051",
            "80565f73-e202-4122-9d4c-db171b922b6c",
            "06f7b7e4-833f-42db-b7da-a1fe77493c18",
            "081db3be-4e47-4b90-850c-3f3715b95f6d",
            "fd03adef-e425-451b-a8e9-96237686b9f9",
            "63c057cf-c5b4-47db-88be-c90e3848d2ca",
            "5659dace-bdd1-463f-a256-96a4b780e42f",
            "20e5ad8f-8d26-4b8f-a5b0-626b26eb11cb",
            "2cab6b08-cc3b-432c-8829-0e8f47075525",
            "8ca3514d-aac5-40f6-ab6b-c2b083076f90",
            "80c201ef-22e7-4a64-8087-3006e9a42c90",
            "10b75dde-faa7-4c87-97a9-99e96ba9cad1",
            "0ef6ffe2-7285-410c-b0e7-ab5d33e259e1",
            "e05d256c-44fd-4e21-90e5-62b244fa1a0e",
            "2900cd6b-9af4-4e25-8a8f-437f4f2b7cd2"
          ],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550525419525,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "1253383e-7e5b-4dd4-90c9-22409e891d18",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551689221835,
          "parent_id": "f0a4483b-95d9-4c82-8e41-15c96d864674",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "Mutexes"
              ]
            ]
          },
          "type": "page",
          "version": 8
        }
      },
      "20e5ad8f-8d26-4b8f-a5b0-626b26eb11cb": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550525419524,
          "id": "20e5ad8f-8d26-4b8f-a5b0-626b26eb11cb",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550525419524,
          "parent_id": "1253383e-7e5b-4dd4-90c9-22409e891d18",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "So Let’s check the performance of two of them."
              ]
            ]
          },
          "type": "text",
          "version": 5
        }
      },
      "2900cd6b-9af4-4e25-8a8f-437f4f2b7cd2": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550525419525,
          "id": "2900cd6b-9af4-4e25-8a8f-437f4f2b7cd2",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550525419525,
          "parent_id": "1253383e-7e5b-4dd4-90c9-22409e891d18",
          "parent_table": "block",
          "properties": {
            "language": [
              [
                "Plain Text"
              ]
            ],
            "title": [
              [
                "void useSTLSharedMutex()\n{\n    std::shared_mutex shared_mtx_lock;\n\n    std::vector\u003cstd::thread\u003e readThreads;\n    std::vector\u003cstd::thread\u003e writeThreads;\n\n    std::list\u003cint\u003e data = { 0 };\n    volatile bool exit = false;\n\n    std::atomic\u003cint\u003e readProcessedCnt(0);\n    std::atomic\u003cint\u003e writeProcessedCnt(0);\n\n    for (unsigned int i = 0; i \u003c std::thread::hardware_concurrency(); i++)\n    {\n\n        readThreads.push_back(std::thread([\u0026data, \u0026exit, \u0026shared_mtx_lock, \u0026readProcessedCnt]() {\n            std::list\u003cint\u003e mydata;\n            int localProcessCnt = 0;\n\n            while (true)\n            {\n                shared_mtx_lock.lock_shared();\n\n                mydata.push_back(data.back());\n                ++localProcessCnt;\n\n                shared_mtx_lock.unlock_shared();\n\n                if (exit)\n                    break;\n            }\n\n            std::atomic_fetch_add(\u0026readProcessedCnt, localProcessCnt);\n\n        }));\n\n        writeThreads.push_back(std::thread([\u0026data, \u0026exit, \u0026shared_mtx_lock, \u0026writeProcessedCnt]() {\n\n            int localProcessCnt = 0;\n\n            while (true)\n            {\n                shared_mtx_lock.lock();\n\n                data.push_back(rand() % 100);\n                ++localProcessCnt;\n\n                shared_mtx_lock.unlock();\n\n                if (exit)\n                    break;\n            }\n\n            std::atomic_fetch_add(\u0026writeProcessedCnt, localProcessCnt);\n\n        }));\n    }\n\n    std::this_thread::sleep_for(std::chrono::milliseconds(MAIN_WAIT_MILLISECONDS));\n    exit = true;\n\n    for (auto \u0026r : readThreads)\n        r.join();\n\n    for (auto \u0026w : writeThreads)\n        w.join();\n\n    std::cout \u003c\u003c \"STLSharedMutex READ :           \" \u003c\u003c readProcessedCnt \u003c\u003c std::endl;\n    std::cout \u003c\u003c \"STLSharedMutex WRITE :          \" \u003c\u003c writeProcessedCnt \u003c\u003c std::endl;\n    std::cout \u003c\u003c \"TOTAL READ\u0026WRITE :              \" \u003c\u003c readProcessedCnt + writeProcessedCnt \u003c\u003c std::endl \u003c\u003c std::endl;\n}\n\nvoid useSTLSharedTimedMutex()\n{\n    std::shared_timed_mutex shared_mtx_lock;\n\n    std::vector\u003cstd::thread\u003e readThreads;\n    std::vector\u003cstd::thread\u003e writeThreads;\n\n    std::list\u003cint\u003e data = { 0 };\n    volatile bool exit = false;\n\n    std::atomic\u003cint\u003e readProcessedCnt(0);\n    std::atomic\u003cint\u003e writeProcessedCnt(0);\n\n    for (unsigned int i = 0; i \u003c std::thread::hardware_concurrency(); i++)\n    {\n\n        readThreads.push_back(std::thread([\u0026data, \u0026exit, \u0026shared_mtx_lock, \u0026readProcessedCnt]() {\n            std::list\u003cint\u003e mydata;\n            int localProcessCnt = 0;\n\n            while (true)\n            {\n                shared_mtx_lock.lock_shared();\n\n                mydata.push_back(data.back());\n                ++localProcessCnt;\n\n                shared_mtx_lock.unlock_shared();\n\n                if (exit)\n                    break;\n            }\n\n            std::atomic_fetch_add(\u0026readProcessedCnt, localProcessCnt);\n\n        }));\n\n        writeThreads.push_back(std::thread([\u0026data, \u0026exit, \u0026shared_mtx_lock, \u0026writeProcessedCnt]() {\n\n            int localProcessCnt = 0;\n\n            while (true)\n            {\n                shared_mtx_lock.lock();\n\n                data.push_back(rand() % 100);\n                ++localProcessCnt;\n\n                shared_mtx_lock.unlock();\n\n                if (exit)\n                    break;\n            }\n\n            std::atomic_fetch_add(\u0026writeProcessedCnt, localProcessCnt);\n\n        }));\n    }\n\n    std::this_thread::sleep_for(std::chrono::milliseconds(MAIN_WAIT_MILLISECONDS));\n    exit = true;\n\n    for (auto \u0026r : readThreads)\n        r.join();\n\n    for (auto \u0026w : writeThreads)\n        w.join();\n\n    std::cout \u003c\u003c \"STLSharedTimedMutex READ :      \" \u003c\u003c readProcessedCnt \u003c\u003c std::endl;\n    std::cout \u003c\u003c \"STLSharedTimedMutex WRITE :     \" \u003c\u003c writeProcessedCnt \u003c\u003c std::endl;\n    std::cout \u003c\u003c \"TOTAL READ\u0026WRITE :              \" \u003c\u003c readProcessedCnt + writeProcessedCnt \u003c\u003c std::endl \u003c\u003c std::endl;\n}"
              ]
            ]
          },
          "type": "code",
          "version": 5
        }
      },
      "2cab6b08-cc3b-432c-8829-0e8f47075525": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_time": 1550525419524,
          "id": "2cab6b08-cc3b-432c-8829-0e8f47075525",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_time": 1550525419524,
          "parent_id": "1253383e-7e5b-4dd4-90c9-22409e891d18",
          "parent_table": "block",
          "properties": {
            "source": [
              [
                "/tmp/b9e0d0b5-2b5a-4353-8b29-15c691c80b3c/f109152b37fdc74ab2796766013ff66197bf50b2.png"
              ]
            ]
          },
          "type": "image",
          "version": 1
        }
      },
      "37b9e6a2-b456-4dfa-a1f6-55239d9f1544": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_time": 1550525419522,
          "id": "37b9e6a2-b456-4dfa-a1f6-55239d9f1544",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_time": 1550525419522,
          "parent_id": "1253383e-7e5b-4dd4-90c9-22409e891d18",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "Remarks"
              ]
            ]
          },
          "type": "sub_header",
          "version": 1
        }
      },
      "4467222c-2e78-4310-b3f3-e8089e7ec29c": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_time": 1550525419523,
          "id": "4467222c-2e78-4310-b3f3-e8089e7ec29c",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_time": 1550525419523,
          "parent_id": "1253383e-7e5b-4dd4-90c9-22409e891d18",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "It is std::shared_mutex and shared_timed_mutex."
              ]
            ]
          },
          "type": "text",
          "version": 1
        }
      },
      "4474fc7a-cb30-4253-b019-d00f295670d4": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_time": 1550525419522,
          "id": "4474fc7a-cb30-4253-b019-d00f295670d4",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_time": 1550525419522,
          "parent_id": "1253383e-7e5b-4dd4-90c9-22409e891d18",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "The performance difference is more than double.",
                [
                  [
                    "b"
                  ]
                ]
              ]
            ]
          },
          "type": "text",
          "version": 1
        }
      },
      "5659dace-bdd1-463f-a256-96a4b780e42f": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_time": 1550525419524,
          "id": "5659dace-bdd1-463f-a256-96a4b780e42f",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_time": 1550525419524,
          "parent_id": "1253383e-7e5b-4dd4-90c9-22409e891d18",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "This is a huge difference."
              ]
            ]
          },
          "type": "text",
          "version": 1
        }
      },
      "63c057cf-c5b4-47db-88be-c90e3848d2ca": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_time": 1550525419524,
          "id": "63c057cf-c5b4-47db-88be-c90e3848d2ca",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_time": 1550525419524,
          "parent_id": "1253383e-7e5b-4dd4-90c9-22409e891d18",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "You can see that std::shared_timed_mutex is implemented in std::condition_value."
              ]
            ]
          },
          "type": "text",
          "version": 1
        }
      },
      "80565f73-e202-4122-9d4c-db171b922b6c": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550525419523,
          "id": "80565f73-e202-4122-9d4c-db171b922b6c",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550525419523,
          "parent_id": "1253383e-7e5b-4dd4-90c9-22409e891d18",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "You can see that std::shared_mutex is implemented in Windows Slim Reader/Write Locks(https://msdn.microsoft.com/ko-kr/library/windows/desktop/aa904937(v=vs.85).aspx)"
              ]
            ]
          },
          "type": "text",
          "version": 5
        }
      },
      "80c201ef-22e7-4a64-8087-3006e9a42c90": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550525419524,
          "id": "80c201ef-22e7-4a64-8087-3006e9a42c90",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550525419524,
          "parent_id": "1253383e-7e5b-4dd4-90c9-22409e891d18",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "std::shared_mutex processed read/write "
              ],
              [
                "over 2 times",
                [
                  [
                    "b"
                  ]
                ]
              ],
              [
                " more than std::shared_timed_mutex."
              ]
            ]
          },
          "type": "sub_header",
          "version": 5
        }
      },
      "88cb75c5-50dd-4ad6-8cc7-87976902f8dd": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550525419523,
          "id": "88cb75c5-50dd-4ad6-8cc7-87976902f8dd",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550525419523,
          "parent_id": "1253383e-7e5b-4dd4-90c9-22409e891d18",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "If you want to use RWLock, you will find that there are two options."
              ]
            ]
          },
          "type": "text",
          "version": 5
        }
      },
      "8ca3514d-aac5-40f6-ab6b-c2b083076f90": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_time": 1550525419524,
          "id": "8ca3514d-aac5-40f6-ab6b-c2b083076f90",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_time": 1550525419524,
          "parent_id": "1253383e-7e5b-4dd4-90c9-22409e891d18",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "This is the result of read/write test for 1000 millisecond."
              ]
            ]
          },
          "type": "text",
          "version": 1
        }
      },
      "a52e211a-9190-4f0a-8751-4f660fd95eea": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_time": 1550525419522,
          "id": "a52e211a-9190-4f0a-8751-4f660fd95eea",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_time": 1550525419522,
          "parent_id": "1253383e-7e5b-4dd4-90c9-22409e891d18",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "[{“Name”:“C++11”,“GroupName”:null},{“Name”:“c++11”,“GroupName”:null},{“Name”:“C++14”,“GroupName”:null},{“Name”:“c++14”,“GroupName”:null},{“Name”:“C++17”,“GroupName”:null},{“Name”:“c++17”,“GroupName”:null}]"
              ]
            ]
          },
          "type": "text",
          "version": 1
        }
      },
      "a677e302-4293-4318-95d5-56c690a2c051": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_time": 1550525419523,
          "id": "a677e302-4293-4318-95d5-56c690a2c051",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_time": 1550525419523,
          "parent_id": "1253383e-7e5b-4dd4-90c9-22409e891d18",
          "parent_table": "block",
          "properties": {
            "language": [
              [
                "Plain Text"
              ]
            ],
            "title": [
              [
                "class shared_mutex\n{\npublic: \ntypedef _Smtx_t * native_handle_type;\n\nshared_mutex() _NOEXCEPT\n    : _Myhandle(0)\n    {    // default construct\n    }\n\n~shared_mutex() _NOEXCEPT\n    {    // destroy the object\n    }\n\nvoid lock() _NOEXCEPT\n    {    // lock exclusive\n    _Smtx_lock_exclusive(\u0026_Myhandle);\n    }\n\nbool try_lock() _NOEXCEPT\n    {    // try to lock exclusive\n    return (_Smtx_try_lock_exclusive(\u0026_Myhandle) != 0);\n    }\n\nvoid unlock() _NOEXCEPT\n    {    // unlock exclusive\n    _Smtx_unlock_exclusive(\u0026_Myhandle);\n    }\n\nvoid lock_shared() _NOEXCEPT\n    {    // lock non-exclusive\n    _Smtx_lock_shared(\u0026_Myhandle);\n    }\n\nbool try_lock_shared() _NOEXCEPT\n    {    // try to lock non-exclusive\n    return (_Smtx_try_lock_shared(\u0026_Myhandle) != 0);\n    }\n\nvoid unlock_shared() _NOEXCEPT\n    {    // unlock non-exclusive\n    _Smtx_unlock_shared(\u0026_Myhandle);\n    }\n\nnative_handle_type native_handle() _NOEXCEPT\n    {    // get native handle\n    return (\u0026_Myhandle);\n    }\n\nshared_mutex(const shared_mutex\u0026) = delete;\nshared_mutex\u0026 operator=(const shared_mutex\u0026) = delete;\nprivate: \n    _Smtx_t _Myhandle;\n};\n\nvoid __cdecl _Smtx_lock_exclusive(_Smtx_t * smtx)\n{    /* lock shared mutex exclusively */\nAcquireSRWLockExclusive(reinterpret_cast\u003cPSRWLOCK\u003e(smtx));\n}\n\nvoid __cdecl _Smtx_lock_shared(_Smtx_t * smtx)\n{    /* lock shared mutex non-exclusively */\nAcquireSRWLockShared(reinterpret_cast\u003cPSRWLOCK\u003e(smtx));\n}\n\nint __cdecl _Smtx_try_lock_exclusive(_Smtx_t * smtx)\n{    /* try to lock shared mutex exclusively */\nreturn (TryAcquireSRWLockExclusive(reinterpret_cast\u003cPSRWLOCK\u003e(smtx)));\n}\n\nint __cdecl _Smtx_try_lock_shared(_Smtx_t * smtx)\n{    /* try to lock shared mutex non-exclusively */\nreturn (TryAcquireSRWLockShared(reinterpret_cast\u003cPSRWLOCK\u003e(smtx)));\n}\n\nvoid __cdecl _Smtx_unlock_exclusive(_Smtx_t * smtx)\n{    /* unlock exclusive shared mutex */\nReleaseSRWLockExclusive(reinterpret_cast\u003cPSRWLOCK\u003e(smtx));\n}\n\nvoid __cdecl _Smtx_unlock_shared(_Smtx_t * smtx)\n{    /* unlock non-exclusive shared mutex */\nReleaseSRWLockShared(reinterpret_cast\u003cPSRWLOCK\u003e(smtx));\n}"
              ]
            ]
          },
          "type": "code",
          "version": 1
        }
      },
      "aa050ad3-fd4a-484a-98d6-b5b7302d9a50": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_time": 1550525419523,
          "id": "aa050ad3-fd4a-484a-98d6-b5b7302d9a50",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_time": 1550525419523,
          "parent_id": "1253383e-7e5b-4dd4-90c9-22409e891d18",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "But the implementation is totally different.",
                [
                  [
                    "b"
                  ]
                ]
              ]
            ]
          },
          "type": "text",
          "version": 1
        }
      },
      "ad527dc6-d4a7-420b-9234-94d0b9bfb560": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": [
            "c97e2222-373b-4879-ba1e-de9da33c4b9c",
            "069713c9-355d-43e5-bbe3-fe65ccc5d89f",
            "f6fb0c70-b2a7-438e-8fd0-214354d4363c",
            "cad79b8f-8e22-4786-b522-3ce3f7989dfb",
            "9582f39a-18d4-4387-a429-d2d9d9c1c0a3",
            "4e7523ec-807e-469b-846d-6f0e98a9f133",
            "c48a63c8-822c-4a23-a960-60de4face6ae",
            "99e19430-5cdd-423f-8fa9-0e2f0bf264ab",
            "ea4c768f-8ffd-48a6-bc20-bd19b214545c",
            "3724ad56-a879-48bf-847e-5adcfcb60c18",
            "52470773-ddd6-4b1b-ad39-7b26f7b28f00",
            "ee10cf45-84c7-467c-8068-ea9076a2401a",
            "6fdcface-f439-4f73-87ef-255a8f378573",
            "4dc21607-5d04-4a95-bced-ba855fbfa11f",
            "546689ba-7cc0-49cb-ae94-05172f20d6dc",
            "193b149e-733b-4344-8898-29dc4a2ef0b0",
            "7b3003e0-5331-46e9-a216-03a87845d9e4",
            "fe5135d2-0f28-4675-bccd-611b7222102a",
            "a47adf4d-f2bb-4f72-84ee-798641440dfd",
            "903c7a47-fbc0-4b12-81a4-646b290a4e1e",
            "40e8450d-4736-4ad0-be7d-a2d9307ddf4f",
            "b886ff5d-614b-4aa9-9e99-851b7998439b",
            "89d591b2-5143-487b-8a09-144b6b266e4c",
            "ede1fd12-0013-4e8b-a92d-109c2ef39c10",
            "8655f492-9c51-4f68-ad52-8b6c1e02a277",
            "f2a0f008-68d4-4ef0-b159-b4601056dc66",
            "db03800f-1091-419f-bb8b-e6357b79b0ee",
            "50a27510-120b-4da0-9ecb-cf15396a0108",
            "bd95f7bc-834a-4faf-992f-446d54f5fc91",
            "0789dc55-0210-4292-957d-ed83df8e73af",
            "d5d40e50-c234-4e34-8c36-6916f8e79960",
            "5644241e-ceec-479a-8322-e9c1780f1515",
            "de2aa703-c2f6-4f94-bc50-eb5201c26ac3",
            "333099ca-9ef1-4569-b9ad-a7a9275c368b",
            "263edcef-95ee-480a-8c67-1e74662a250a",
            "9a81e0e2-994e-41b0-aa0f-0bb41311ad7d",
            "1146c4bd-8317-421d-b231-ebcb0eff5721",
            "ee86edbe-8dd9-497a-a24c-fa516272404e",
            "13fedea6-df65-4996-9280-9cedb29d5f94",
            "b96c747c-3d87-49a0-b2bb-264f7c11b216",
            "2457e2b5-2a2a-4489-9eac-adb5cebfd9b8",
            "ecf8cc46-eac4-4c36-a422-ed2cca054451",
            "cbd900b3-1684-4f0d-977a-5a5b2a20aff3",
            "26e69b2d-1c6d-47ea-af87-47fa9cfbdf56",
            "cb822004-fe61-4bd8-91b8-d45b2acf0576",
            "efdc4616-d5e4-4dce-b49c-941c07a9ac4b",
            "43b2d3b6-c6aa-4441-b665-3932542c711c",
            "6980d61a-f1fa-491f-8409-409e295a4b03",
            "e197edf1-7913-4c71-bf9f-78feec182413",
            "a3104ba4-9a8b-4f2a-ad89-25f36d3b9595",
            "c0487639-ff5b-4e90-a0b3-9fe411676c2c",
            "402ef4da-a4e3-4503-ab08-9a4aa56821b5",
            "3b939fe5-bf07-416e-b626-9b4dcfb5abc4",
            "94bfa868-4e02-4b90-841b-817c34132524",
            "8a295383-3e95-42dc-b126-f5d5d4d9927a",
            "afe087c6-fdaf-4e79-b087-b5329772ae68",
            "139ade48-e995-4c51-9c31-2edc9475f16e",
            "3b14aac5-20b3-4de0-9a04-adc1cc273aec",
            "2be9c7d5-be12-439a-8968-ad057c67187a",
            "71517390-0244-456d-87c4-82c582ca8abf",
            "f1b860db-be5a-41ed-a67b-b7b0181ec59f",
            "d548e856-41b8-49c8-a801-044c518c9fe5",
            "83f01298-2804-4599-8deb-99728a5d557a",
            "0b17f7b9-11d1-4229-931e-966fb51d1ba9",
            "eb50f34f-bfa8-4e16-9ad9-d114eb1d34d9",
            "96325b08-db02-4f4f-a7a3-7510a746dbe2",
            "5a1044bb-eec6-47e0-932c-1a000fc67e20",
            "48a240ac-2fc8-4208-bd39-82f2c3d27cb4",
            "2ed71a30-e220-47b0-b0e7-1bc14fce30c0",
            "ea515dbf-689d-48fb-bfb8-93f8853d7ec0",
            "899c3027-a75e-4a44-9144-10a53c6a2c11",
            "e1dd94ae-aa5a-4f89-b959-f2ec61771796",
            "fcd2d991-afe0-4c4f-a9fe-760a139ae1f3",
            "d0bc06f8-edea-49a0-bdbb-c1bef0d073bd",
            "6c5aa9dd-7698-4690-bd9e-644763376917",
            "5fbdea23-a3bd-48e3-9bb9-c7ca69fd9aa2",
            "44b9891c-fe65-4aa6-8ac6-b623709b7c02",
            "904db18b-f9e4-4135-accd-8cab1b7efd09",
            "a29d7b5a-3989-43f1-8efa-86ef82101f43",
            "c477f25f-108c-44a4-88a0-7be0b1a8f442",
            "1c542776-d859-4f7e-889a-d3f2c5b93f45",
            "f05fc49e-c44c-4e93-b1f0-a05de793c5bd",
            "6770e597-215e-480b-b658-f449f175ed3c",
            "d3696e4f-8789-4401-af6c-2f073d356228",
            "5dbd715a-2e96-4062-9cda-4e181e63af5e",
            "1e5df2e7-ee0b-4037-ab62-15139a784f28",
            "10c1e1fe-bf0e-4f71-b1f2-173539570a03",
            "bd2b6b7e-15fe-4593-9be0-b9cb97312af0",
            "106e396c-5cd1-4e4b-a70c-30ba85edca56",
            "9a0f90cc-6905-4660-8751-556567fcd897",
            "1b4aabcd-82e1-426e-b2cd-5f1a6cfa8e60",
            "e6a35ae0-352c-42a0-9c74-633d5c76667f",
            "e2db6936-0727-4a61-bd9e-8712c9355a28",
            "02d273f3-3937-4a5b-86af-fbaa7082fc98",
            "5eb58f1d-da3c-4ebe-aff3-c98a60cca1a7",
            "289db939-0630-4d39-8987-cd9042ba485d",
            "5b32901d-2e27-4970-ba74-be06a103aa30",
            "4f03abce-5ffe-4575-9601-52e18b342ca2",
            "4a738092-15a0-42a9-8178-c62e1f86c80c",
            "f6be37ea-b1ea-4d12-902e-1e55a74f3c28",
            "66d100a7-32a0-4479-9f62-57e81c004eb6",
            "b7131d5c-8602-4af3-82a7-7c00e59ad384",
            "2d35c52b-5348-43d8-baf3-741d0b68c7ff",
            "8f46fba9-ba8b-4eaf-bb5f-2370fa61981b",
            "3b6d2215-7c30-4151-b9f1-7d1dc6e9d0de",
            "b41d10e9-7c12-482e-a1ff-612580407bc1",
            "5080976c-532d-492c-9735-9abf7dc903ae",
            "a0e8b380-dc71-4c5e-9564-5a6a96d413b0",
            "c70aafee-9819-4bd7-9b37-69e9f016666b",
            "2f06e164-6745-4c46-9402-92f51f9f9266",
            "b2086806-a259-48af-adcb-172245e66aa0",
            "0dfb5c8c-d986-4536-97a3-b3f543cfd7fa",
            "14d06bc1-b112-4b2f-a0a3-67a8dd9c958c",
            "4f68e8c3-ce07-490a-ad1e-1605c992a0ab",
            "f2023690-0f94-491a-ac9b-9c913f18d32c",
            "48c65d67-f77e-4b0b-b90a-83ab75bd68a9",
            "fc7b0093-a386-4cfb-9e24-ebd1f41fa3fa",
            "1e648ce1-cc7e-4997-bf6e-9a33d2ac504d",
            "e105eeaa-e8c4-4f5c-b412-90c65bdf217a",
            "d5db2d0f-24c4-4bf6-a1d3-fc170bfb1b75",
            "b4ae7d5c-1d56-46c7-a0d9-9af16a5bad5f",
            "13e1fda6-ad15-4061-a10e-d4a621970eb7",
            "29483c03-d3f3-426c-bd91-6dba06c1c86f",
            "5731e795-bc6e-4f67-a20f-e1ea328ebb4e",
            "ffc91cd7-ce2e-43bd-83f9-dd500633c0a2",
            "50856007-ed7d-41fb-8551-374ecae3e24b",
            "69b8fd2c-ca44-4dcb-84cc-49ed820592d4",
            "cbbee582-eb1d-4f69-a297-e10ba2cd83ab",
            "e3f32187-64e1-4609-b294-74d479b50a70",
            "dadb2eed-6939-4a7d-9afa-46a0514a66be",
            "7933074e-4123-4c04-8235-24ded3b719ed",
            "3e515719-4b1e-4dc7-9955-45485e25e7d3",
            "c793f95d-c3c9-4e23-a753-d7b7871c3bbf",
            "f0479f5d-620b-453a-b476-4c9e9418b846",
            "020f0e91-0de0-4617-bb97-e4863949153d",
            "6dc44543-880c-4829-bd86-818b80f5aac6",
            "0cb787c7-79fb-4e4c-a8f2-c95bfa483953",
            "4e04587c-419b-4bb3-bcb4-efe6a43e35e9",
            "46b28c54-a7e1-4286-9bdc-69ae87c3bad3",
            "5e61d351-5c67-4222-b553-e5a42137412d",
            "e819fb9f-77e3-490d-9b3b-288189045e39",
            "b1cbbef7-66d3-49c3-aaff-f598af5cdf47",
            "05715f55-0a2a-4c15-8aa1-b8c1e8aa98a4",
            "f0a4483b-95d9-4c82-8e41-15c96d864674",
            "2dfdecd0-c228-4dc2-941d-0a4e53390d1c",
            "2172f363-6ba3-4c7d-b75a-95189cc14546",
            "6f1bdf3d-1474-4baa-98bd-f39758d46389",
            "03d0218f-3acf-4c09-8902-6b09a4f35be4",
            "5291840b-1ac0-4473-9bc3-691467a51c05",
            "83d53c9b-bf14-42a2-8fb8-238a2fcb905a",
            "8e4180b2-04a8-47ee-8473-9c3c632e261a",
            "10708491-24c3-48f4-b554-d2665157037f"
          ],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_time": 1550521908832,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "ad527dc6-d4a7-420b-9234-94d0b9bfb560",
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_time": 1570604640000,
          "parent_id": "204dd4d3-a72c-4a9e-ba37-ebd5fc5ba989",
          "parent_table": "block",
          "permissions": [
            {
              "allow_search_engine_indexing": false,
              "role": "comment_only",
              "type": "public_permission"
            }
          ],
          "properties": {
            "title": [
              [
                "Essential C++"
              ]
            ]
          },
          "type": "page",
          "version": 634
        }
      },
      "e05d256c-44fd-4e21-90e5-62b244fa1a0e": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550525419525,
          "id": "e05d256c-44fd-4e21-90e5-62b244fa1a0e",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550525419525,
          "parent_id": "1253383e-7e5b-4dd4-90c9-22409e891d18",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "the code below is the code in this example."
              ]
            ]
          },
          "type": "text",
          "version": 5
        }
      },
      "e6c2140f-ce69-4f3a-99d8-85bb392a2565": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_time": 1550525419523,
          "id": "e6c2140f-ce69-4f3a-99d8-85bb392a2565",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_time": 1550525419523,
          "parent_id": "1253383e-7e5b-4dd4-90c9-22409e891d18",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "The code below is MSVC14.1 implementation of std::shared_mutex."
              ]
            ]
          },
          "type": "sub_header",
          "version": 1
        }
      },
      "f0a4483b-95d9-4c82-8e41-15c96d864674": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": [
            "1253383e-7e5b-4dd4-90c9-22409e891d18",
            "95d680bc-328c-4919-8918-ea82b29b9fc6",
            "8968eddd-a19d-4834-8264-e27eb0690bf5",
            "24ab0a9d-0858-4d80-a9d6-30497c60bbbd",
            "75672fb0-6421-4079-bc30-8395dc04e68b",
            "a71f2c9d-26c2-400c-bfeb-040da789fabe",
            "db763467-29df-4b4a-a287-b4672143b0a3",
            "847ba6f9-1ef0-40b9-9306-02a87fb1c56d"
          ],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550525400000,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "f0a4483b-95d9-4c82-8e41-15c96d864674",
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1551688440000,
          "parent_id": "ad527dc6-d4a7-420b-9234-94d0b9bfb560",
          "parent_table": "block",
          "permissions": [
            {
              "role": "editor",
              "type": "user_permission",
              "user_id": "bb760e2d-d679-4b64-b2a9-03005b21870a"
            }
          ],
          "properties": {
            "title": [
              [
                "Mutexes"
              ]
            ]
          },
          "type": "page",
          "version": 32
        }
      },
      "f15e693d-ebbd-4932-8980-a2849aadf2bf": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550525419523,
          "id": "f15e693d-ebbd-4932-8980-a2849aadf2bf",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550525419523,
          "parent_id": "1253383e-7e5b-4dd4-90c9-22409e891d18",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "you may think std::shared_timed_mutex is just the version ‘std::shared_mutex + time method’."
              ]
            ]
          },
          "type": "text",
          "version": 5
        }
      },
      "fa7814aa-e4e8-4322-9315-2d10e44d5ef8": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_time": 1550525419519,
          "id": "fa7814aa-e4e8-4322-9315-2d10e44d5ef8",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_time": 1550525419519,
          "parent_id": "1253383e-7e5b-4dd4-90c9-22409e891d18",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "Versions"
              ]
            ]
          },
          "type": "sub_header",
          "version": 1
        }
      },
      "fd03adef-e425-451b-a8e9-96237686b9f9": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_time": 1550525419524,
          "id": "fd03adef-e425-451b-a8e9-96237686b9f9",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_time": 1550525419524,
          "parent_id": "1253383e-7e5b-4dd4-90c9-22409e891d18",
          "parent_table": "block",
          "properties": {
            "language": [
              [
                "Plain Text"
              ]
            ],
            "title": [
              [
                "class shared_timed_mutex\n{\ntypedef unsigned int _Read_cnt_t;\nstatic constexpr _Read_cnt_t _Max_readers = _Read_cnt_t(-1);\npublic:\nshared_timed_mutex() _NOEXCEPT\n    : _Mymtx(), _Read_queue(), _Write_queue(),\n        _Readers(0), _Writing(false)\n    {    // default construct\n    }\n\n~shared_timed_mutex() _NOEXCEPT\n    {    // destroy the object\n    }\n\nvoid lock()\n    {    // lock exclusive\n    unique_lock\u003cmutex\u003e _Lock(_Mymtx);\n    while (_Writing)\n        _Write_queue.wait(_Lock);\n    _Writing = true;\n    while (0 \u003c _Readers)\n        _Read_queue.wait(_Lock);    // wait for writing, no readers\n    }\n\nbool try_lock()\n    {    // try to lock exclusive\n    lock_guard\u003cmutex\u003e _Lock(_Mymtx);\n    if (_Writing || 0 \u003c _Readers)\n        return (false);\n    else\n        {    // set writing, no readers\n        _Writing = true;\n        return (true);\n        }\n    }\n\ntemplate\u003cclass _Rep,\n    class _Period\u003e\n    bool try_lock_for(\n        const chrono::duration\u003c_Rep, _Period\u003e\u0026 _Rel_time)\n    {    // try to lock for duration\n    return (try_lock_until(chrono::steady_clock::now() + _Rel_time));\n    }\n\ntemplate\u003cclass _Clock,\n    class _Duration\u003e\n    bool try_lock_until(\n        const chrono::time_point\u003c_Clock, _Duration\u003e\u0026 _Abs_time)\n    {    // try to lock until time point\n    auto _Not_writing = [this] { return (!_Writing); };\n    auto _Zero_readers = [this] { return (_Readers == 0); };\n    unique_lock\u003cmutex\u003e _Lock(_Mymtx);\n\n    if (!_Write_queue.wait_until(_Lock, _Abs_time, _Not_writing))\n        return (false);\n\n    _Writing = true;\n\n    if (!_Read_queue.wait_until(_Lock, _Abs_time, _Zero_readers))\n        {    // timeout, leave writing state\n        _Writing = false;\n        _Lock.unlock();    // unlock before notifying, for efficiency\n        _Write_queue.notify_all();\n        return (false);\n        }\n\n    return (true);\n    }\n\nvoid unlock()\n    {    // unlock exclusive\n        {    // unlock before notifying, for efficiency\n        lock_guard\u003cmutex\u003e _Lock(_Mymtx);\n\n        _Writing = false;\n        }\n\n    _Write_queue.notify_all();\n    }\n\nvoid lock_shared()\n    {    // lock non-exclusive\n    unique_lock\u003cmutex\u003e _Lock(_Mymtx);\n    while (_Writing || _Readers == _Max_readers)\n        _Write_queue.wait(_Lock);\n    ++_Readers;\n    }\n\nbool try_lock_shared()\n    {    // try to lock non-exclusive\n    lock_guard\u003cmutex\u003e _Lock(_Mymtx);\n    if (_Writing || _Readers == _Max_readers)\n        return (false);\n    else\n        {    // count another reader\n        ++_Readers;\n        return (true);\n        }\n    }\n\ntemplate\u003cclass _Rep,\n    class _Period\u003e\n    bool try_lock_shared_for(\n        const chrono::duration\u003c_Rep, _Period\u003e\u0026 _Rel_time)\n    {    // try to lock non-exclusive for relative time\n    return (try_lock_shared_until(_Rel_time\n        + chrono::steady_clock::now()));\n    }\n\ntemplate\u003cclass _Time\u003e\n    bool _Try_lock_shared_until(_Time _Abs_time)\n    {    // try to lock non-exclusive until absolute time\n    auto _Can_acquire = [this] {\n        return (!_Writing \u0026\u0026 _Readers \u003c _Max_readers); };\n\n    unique_lock\u003cmutex\u003e _Lock(_Mymtx);\n\n    if (!_Write_queue.wait_until(_Lock, _Abs_time, _Can_acquire))\n        return (false);\n\n    ++_Readers;\n    return (true);\n    }\n\ntemplate\u003cclass _Clock,\n    class _Duration\u003e\n    bool try_lock_shared_until(\n        const chrono::time_point\u003c_Clock, _Duration\u003e\u0026 _Abs_time)\n    {    // try to lock non-exclusive until absolute time\n    return (_Try_lock_shared_until(_Abs_time));\n    }\n\nbool try_lock_shared_until(const xtime *_Abs_time)\n    {    // try to lock non-exclusive until absolute time\n    return (_Try_lock_shared_until(_Abs_time));\n    }\n\nvoid unlock_shared()\n    {    // unlock non-exclusive\n    _Read_cnt_t _Local_readers;\n    bool _Local_writing;\n\n        {    // unlock before notifying, for efficiency\n        lock_guard\u003cmutex\u003e _Lock(_Mymtx);\n        --_Readers;\n        _Local_readers = _Readers;\n        _Local_writing = _Writing;\n        }\n\n    if (_Local_writing \u0026\u0026 _Local_readers == 0)\n        _Read_queue.notify_one();\n    else if (!_Local_writing \u0026\u0026 _Local_readers == _Max_readers - 1)\n        _Write_queue.notify_all();\n    }\n\nshared_timed_mutex(const shared_timed_mutex\u0026) = delete;\nshared_timed_mutex\u0026 operator=(const shared_timed_mutex\u0026) = delete;\nprivate:\nmutex _Mymtx;\ncondition_variable _Read_queue, _Write_queue;\n_Read_cnt_t _Readers;\nbool _Writing;\n};\n\nclass stl_condition_variable_win7 final : public stl_condition_variable_interface\n{\npublic:\n    stl_condition_variable_win7()\n    {\n        __crtInitializeConditionVariable(\u0026m_condition_variable);\n    }\n\n    ~stl_condition_variable_win7() = delete;\n    stl_condition_variable_win7(const stl_condition_variable_win7\u0026) = delete;\n    stl_condition_variable_win7\u0026 operator=(const stl_condition_variable_win7\u0026) = delete;\n\n    virtual void destroy() override {}\n\n    virtual void wait(stl_critical_section_interface *lock) override\n    {\n        if (!stl_condition_variable_win7::wait_for(lock, INFINITE))\n            std::terminate();\n    }\n\n    virtual bool wait_for(stl_critical_section_interface *lock, unsigned int timeout) override\n    {\n        return __crtSleepConditionVariableSRW(\u0026m_condition_variable, static_cast\u003cstl_critical_section_win7 *\u003e(lock)-\u003enative_handle(), timeout, 0) != 0;\n    }\n\n    virtual void notify_one() override\n    {\n        __crtWakeConditionVariable(\u0026m_condition_variable);\n    }\n\n    virtual void notify_all() override\n    {\n        __crtWakeAllConditionVariable(\u0026m_condition_variable);\n    }\n\nprivate:\n    CONDITION_VARIABLE m_condition_variable;\n};"
              ]
            ]
          },
          "type": "code",
          "version": 1
        }
      }
    },
    "notion_user": {
      "bb760e2d-d679-4b64-b2a9-03005b21870a": {
        "role": "reader",
        "value": {
          "clipper_onboarding_completed": true,
          "email": "kkowalczyk@gmail.com",
          "family_name": "Kowalczyk",
          "given_name": "Krzysztof",
          "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "mobile_onboarding_completed": true,
          "onboarding_completed": true,
          "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
          "version": 231
        }
      }
    },
    "space": {}
  }
}
