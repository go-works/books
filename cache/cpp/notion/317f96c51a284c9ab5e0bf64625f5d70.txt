2242 1575323996450 httpcache-v1
Method: POST
URL: https://www.notion.so/api/v3/getRecordValues
Body:+110
{
  "requests": [
    {
      "id": "317f96c5-1a28-4c9a-b5e0-bf64625f5d70",
      "table": "block"
    }
  ]
}
Response:+2042
{
  "results": [
    {
      "role": "comment_only",
      "value": {
        "alive": true,
        "content": [
          "5ec01aee-6263-42c3-8317-45917d752926",
          "d2aced3f-d18b-4647-b678-c6d5fca8a2c4",
          "7e837654-18ac-41c8-b699-f89f87d97679",
          "3a43cb59-33d1-497f-a108-ba5fda13854a",
          "a647ac24-bd89-4580-ac92-2f90d0e611d4",
          "2d66d675-ee8f-4ea7-910f-363ab1fb0a25",
          "e4b00d04-8a34-4fa2-9336-2ffba1584588",
          "d77665c4-47ee-43bd-90de-d1b3f0e69c0f",
          "6a80944c-1e33-46cb-ba35-0fa534456cd9",
          "ff92ca2c-1671-45de-b575-82d3d236f4c9",
          "0b766a2e-30f3-4d9f-83ec-6bdecc33a832",
          "9e3a19d4-30c4-4594-ad73-b851f0947f9c",
          "916e08f2-e0fa-4ecd-b311-8e5095596bce",
          "9412be94-226e-4e93-804e-c3f2e8129be6",
          "927986d9-a122-4629-95b0-64172ac5d2d4",
          "b686a442-7762-481c-acf4-419605acb69d",
          "7ce5313c-2965-4d06-8f91-8fb395a14200",
          "e3af2fec-975c-4b1d-9473-9ae1f06c139b",
          "d06a3f17-1c0c-441d-a01a-f2f6c770d8ad",
          "07f84304-2836-4fd4-983f-cd317df7fc45"
        ],
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_by_table": "notion_user",
        "created_time": 1550521956461,
        "format": {
          "page_full_width": true,
          "page_small_text": true
        },
        "id": "317f96c5-1a28-4c9a-b5e0-bf64625f5d70",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_by_table": "notion_user",
        "last_edited_time": 1550796540000,
        "parent_id": "cbd900b3-1684-4f0d-977a-5a5b2a20aff3",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Calculating Factorials"
            ]
          ]
        },
        "type": "page",
        "version": 14
      }
    }
  ]
}
36288 1575323996452 httpcache-v1
Method: POST
URL: https://www.notion.so/api/v3/loadPageChunk
Body:+152
{
  "chunkNumber": 0,
  "cursor": {
    "stack": []
  },
  "limit": 50,
  "pageId": "317f96c5-1a28-4c9a-b5e0-bf64625f5d70",
  "verticalColumns": false
}
Response:+36047
{
  "cursor": {
    "stack": []
  },
  "recordMap": {
    "block": {
      "07f84304-2836-4fd4-983f-cd317df7fc45": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_time": 1550521956461,
          "id": "07f84304-2836-4fd4-983f-cd317df7fc45",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_time": 1550796540000,
          "parent_id": "317f96c5-1a28-4c9a-b5e0-bf64625f5d70",
          "parent_table": "block",
          "properties": {
            "language": [
              [
                "C++"
              ]
            ],
            "title": [
              [
                "#include \u003ciostream\u003e\n#include \u003cutility\u003e\n\ntemplate \u003cclass T, T N, class I = std::make_integer_sequence\u003cT, N\u003e\u003e\nstruct factorial;\n\ntemplate \u003cclass T, T N, T... Is\u003e\nstruct factorial\u003cT,N,std::index_sequence\u003cT, Is...\u003e\u003e {\n   static constexpr T value = (static_cast\u003cT\u003e(1) * ... * (Is + 1));\n};\n\nint main() {\n   std::cout \u003c\u003c factorial\u003cint, 5\u003e::value \u003c\u003c std::endl;\n}"
              ]
            ]
          },
          "type": "code",
          "version": 3
        }
      },
      "0b766a2e-30f3-4d9f-83ec-6bdecc33a832": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_time": 1550521956460,
          "id": "0b766a2e-30f3-4d9f-83ec-6bdecc33a832",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_time": 1550796540000,
          "parent_id": "317f96c5-1a28-4c9a-b5e0-bf64625f5d70",
          "parent_table": "block",
          "properties": {
            "language": [
              [
                "C++"
              ]
            ],
            "title": [
              [
                "#include \u003ciostream\u003e\n#include \u003ctype_traits\u003e\n\ntemplate\u003clong long n\u003e\nstruct factorial :\n  std::integral_constant\u003clong long, n * factorial\u003cn - 1\u003e::value\u003e {};\n\ntemplate\u003c\u003e\nstruct factorial\u003c0\u003e :\n  std::integral_constant\u003clong long, 1\u003e {};\n\nint main()\n{\n    std::cout \u003c\u003c factorial\u003c7\u003e::value \u003c\u003c std::endl;    // prints \"5040\"\n}"
              ]
            ]
          },
          "type": "code",
          "version": 3
        }
      },
      "2d66d675-ee8f-4ea7-910f-363ab1fb0a25": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_time": 1550521956459,
          "id": "2d66d675-ee8f-4ea7-910f-363ab1fb0a25",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_time": 1550521956459,
          "parent_id": "317f96c5-1a28-4c9a-b5e0-bf64625f5d70",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "Since template metafunctions execute at compile time, their results can be used in contexts that require compile-time values. For example:"
              ]
            ]
          },
          "type": "text",
          "version": 1
        }
      },
      "317f96c5-1a28-4c9a-b5e0-bf64625f5d70": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": [
            "5ec01aee-6263-42c3-8317-45917d752926",
            "d2aced3f-d18b-4647-b678-c6d5fca8a2c4",
            "7e837654-18ac-41c8-b699-f89f87d97679",
            "3a43cb59-33d1-497f-a108-ba5fda13854a",
            "a647ac24-bd89-4580-ac92-2f90d0e611d4",
            "2d66d675-ee8f-4ea7-910f-363ab1fb0a25",
            "e4b00d04-8a34-4fa2-9336-2ffba1584588",
            "d77665c4-47ee-43bd-90de-d1b3f0e69c0f",
            "6a80944c-1e33-46cb-ba35-0fa534456cd9",
            "ff92ca2c-1671-45de-b575-82d3d236f4c9",
            "0b766a2e-30f3-4d9f-83ec-6bdecc33a832",
            "9e3a19d4-30c4-4594-ad73-b851f0947f9c",
            "916e08f2-e0fa-4ecd-b311-8e5095596bce",
            "9412be94-226e-4e93-804e-c3f2e8129be6",
            "927986d9-a122-4629-95b0-64172ac5d2d4",
            "b686a442-7762-481c-acf4-419605acb69d",
            "7ce5313c-2965-4d06-8f91-8fb395a14200",
            "e3af2fec-975c-4b1d-9473-9ae1f06c139b",
            "d06a3f17-1c0c-441d-a01a-f2f6c770d8ad",
            "07f84304-2836-4fd4-983f-cd317df7fc45"
          ],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550521956461,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "317f96c5-1a28-4c9a-b5e0-bf64625f5d70",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550796540000,
          "parent_id": "cbd900b3-1684-4f0d-977a-5a5b2a20aff3",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "Calculating Factorials"
              ]
            ]
          },
          "type": "page",
          "version": 14
        }
      },
      "3a43cb59-33d1-497f-a108-ba5fda13854a": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_time": 1550521956457,
          "id": "3a43cb59-33d1-497f-a108-ba5fda13854a",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_time": 1550521956457,
          "parent_id": "317f96c5-1a28-4c9a-b5e0-bf64625f5d70",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "In the above code, we evaluate the "
              ],
              [
                "factorial",
                [
                  [
                    "c"
                  ]
                ]
              ],
              [
                " metafunction by instantiating the template with the parameters we want to pass, and using "
              ],
              [
                "::value",
                [
                  [
                    "c"
                  ]
                ]
              ],
              [
                " to get the result of the evaluation."
              ]
            ]
          },
          "type": "text",
          "version": 1
        }
      },
      "5ec01aee-6263-42c3-8317-45917d752926": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_time": 1550521956456,
          "id": "5ec01aee-6263-42c3-8317-45917d752926",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_time": 1550521956456,
          "parent_id": "317f96c5-1a28-4c9a-b5e0-bf64625f5d70",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "Factorials can be computed at compile-time using template metaprogramming techniques."
              ]
            ]
          },
          "type": "text",
          "version": 1
        }
      },
      "6a80944c-1e33-46cb-ba35-0fa534456cd9": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_time": 1550521956460,
          "id": "6a80944c-1e33-46cb-ba35-0fa534456cd9",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_time": 1550521956460,
          "parent_id": "317f96c5-1a28-4c9a-b5e0-bf64625f5d70",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "Limitation",
                [
                  [
                    "b"
                  ]
                ]
              ],
              [
                ": Most of the compilers won’t allow recursion depth beyond a limit. For example, "
              ],
              [
                "g++",
                [
                  [
                    "c"
                  ]
                ]
              ],
              [
                " compiler by default limits recursion depeth to 256 levels. In case of "
              ],
              [
                "g++",
                [
                  [
                    "c"
                  ]
                ]
              ],
              [
                ", programmer can set recursion depth using "
              ],
              [
                "-ftemplate-depth-X",
                [
                  [
                    "c"
                  ]
                ]
              ],
              [
                " option."
              ]
            ]
          },
          "type": "text",
          "version": 1
        }
      },
      "7ce5313c-2965-4d06-8f91-8fb395a14200": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_time": 1550521956461,
          "id": "7ce5313c-2965-4d06-8f91-8fb395a14200",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_time": 1550521956461,
          "parent_id": "317f96c5-1a28-4c9a-b5e0-bf64625f5d70",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "Or even:"
              ]
            ]
          },
          "type": "text",
          "version": 1
        }
      },
      "7e837654-18ac-41c8-b699-f89f87d97679": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_time": 1550521956457,
          "id": "7e837654-18ac-41c8-b699-f89f87d97679",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_time": 1550521956457,
          "parent_id": "317f96c5-1a28-4c9a-b5e0-bf64625f5d70",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "factorial",
                [
                  [
                    "c"
                  ]
                ]
              ],
              [
                " is a struct, but in template metaprogramming it is treated as a template metafunction. By convention, template metafunctions are evaluated by checking a particular member, either "
              ],
              [
                "::type",
                [
                  [
                    "c"
                  ]
                ]
              ],
              [
                " for metafunctions that result in types, or "
              ],
              [
                "::value",
                [
                  [
                    "c"
                  ]
                ]
              ],
              [
                " for metafunctions that generate values."
              ]
            ]
          },
          "type": "text",
          "version": 1
        }
      },
      "916e08f2-e0fa-4ecd-b311-8e5095596bce": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550521956460,
          "id": "916e08f2-e0fa-4ecd-b311-8e5095596bce",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550796540000,
          "parent_id": "317f96c5-1a28-4c9a-b5e0-bf64625f5d70",
          "parent_table": "block",
          "properties": {
            "language": [
              [
                "C++"
              ]
            ],
            "title": [
              [
                "#include \u003ciostream\u003e\n\nconstexpr long long factorial(long long n)\n{\n  return (n == 0) ? 1 : n * factorial(n - 1);\n}\n\nint main()\n{\n  char test[factorial(3)];\n  std::cout \u003c\u003c factorial(7) \u003c\u003c '\\n';\n}"
              ]
            ]
          },
          "type": "code",
          "version": 7
        }
      },
      "927986d9-a122-4629-95b0-64172ac5d2d4": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_time": 1550521956461,
          "id": "927986d9-a122-4629-95b0-64172ac5d2d4",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_time": 1550521956461,
          "parent_id": "317f96c5-1a28-4c9a-b5e0-bf64625f5d70",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "Since C++14, many restrictions for "
              ],
              [
                "constexpr",
                [
                  [
                    "c"
                  ]
                ]
              ],
              [
                " functions have been dropped and they can now be written much more conveniently:"
              ]
            ]
          },
          "type": "text",
          "version": 1
        }
      },
      "9412be94-226e-4e93-804e-c3f2e8129be6": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_time": 1550521956460,
          "id": "9412be94-226e-4e93-804e-c3f2e8129be6",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_time": 1550521956460,
          "parent_id": "317f96c5-1a28-4c9a-b5e0-bf64625f5d70",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "The body of "
              ],
              [
                "factorial()",
                [
                  [
                    "c"
                  ]
                ]
              ],
              [
                " is written as a single statement because in C++11 "
              ],
              [
                "constexpr",
                [
                  [
                    "c"
                  ]
                ]
              ],
              [
                " functions can only use a quite limited subset of the language."
              ]
            ]
          },
          "type": "text",
          "version": 1
        }
      },
      "9e3a19d4-30c4-4594-ad73-b851f0947f9c": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_time": 1550521956460,
          "id": "9e3a19d4-30c4-4594-ad73-b851f0947f9c",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_time": 1550521956460,
          "parent_id": "317f96c5-1a28-4c9a-b5e0-bf64625f5d70",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "Additionally, "
              ],
              [
                "constexpr",
                [
                  [
                    "c"
                  ]
                ]
              ],
              [
                " functions become a cleaner alternative."
              ]
            ]
          },
          "type": "text",
          "version": 1
        }
      },
      "a647ac24-bd89-4580-ac92-2f90d0e611d4": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_time": 1550521956459,
          "id": "a647ac24-bd89-4580-ac92-2f90d0e611d4",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_time": 1550796540000,
          "parent_id": "317f96c5-1a28-4c9a-b5e0-bf64625f5d70",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "The metafunction itself relies on recursively instantiating the same metafunction with smaller values. The "
              ],
              [
                "factorial\u003c0\u003e",
                [
                  [
                    "c"
                  ]
                ]
              ],
              [
                " specialization represents the terminating condition. Template metaprogramming has most of the restrictions of a functional programming language, so recursion is the primary “looping” construct."
              ]
            ]
          },
          "type": "text",
          "version": 4
        }
      },
      "ad527dc6-d4a7-420b-9234-94d0b9bfb560": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": [
            "c97e2222-373b-4879-ba1e-de9da33c4b9c",
            "069713c9-355d-43e5-bbe3-fe65ccc5d89f",
            "f6fb0c70-b2a7-438e-8fd0-214354d4363c",
            "cad79b8f-8e22-4786-b522-3ce3f7989dfb",
            "9582f39a-18d4-4387-a429-d2d9d9c1c0a3",
            "4e7523ec-807e-469b-846d-6f0e98a9f133",
            "c48a63c8-822c-4a23-a960-60de4face6ae",
            "99e19430-5cdd-423f-8fa9-0e2f0bf264ab",
            "ea4c768f-8ffd-48a6-bc20-bd19b214545c",
            "3724ad56-a879-48bf-847e-5adcfcb60c18",
            "52470773-ddd6-4b1b-ad39-7b26f7b28f00",
            "ee10cf45-84c7-467c-8068-ea9076a2401a",
            "6fdcface-f439-4f73-87ef-255a8f378573",
            "4dc21607-5d04-4a95-bced-ba855fbfa11f",
            "546689ba-7cc0-49cb-ae94-05172f20d6dc",
            "193b149e-733b-4344-8898-29dc4a2ef0b0",
            "7b3003e0-5331-46e9-a216-03a87845d9e4",
            "fe5135d2-0f28-4675-bccd-611b7222102a",
            "a47adf4d-f2bb-4f72-84ee-798641440dfd",
            "903c7a47-fbc0-4b12-81a4-646b290a4e1e",
            "40e8450d-4736-4ad0-be7d-a2d9307ddf4f",
            "b886ff5d-614b-4aa9-9e99-851b7998439b",
            "89d591b2-5143-487b-8a09-144b6b266e4c",
            "ede1fd12-0013-4e8b-a92d-109c2ef39c10",
            "8655f492-9c51-4f68-ad52-8b6c1e02a277",
            "f2a0f008-68d4-4ef0-b159-b4601056dc66",
            "db03800f-1091-419f-bb8b-e6357b79b0ee",
            "50a27510-120b-4da0-9ecb-cf15396a0108",
            "bd95f7bc-834a-4faf-992f-446d54f5fc91",
            "0789dc55-0210-4292-957d-ed83df8e73af",
            "d5d40e50-c234-4e34-8c36-6916f8e79960",
            "5644241e-ceec-479a-8322-e9c1780f1515",
            "de2aa703-c2f6-4f94-bc50-eb5201c26ac3",
            "333099ca-9ef1-4569-b9ad-a7a9275c368b",
            "263edcef-95ee-480a-8c67-1e74662a250a",
            "9a81e0e2-994e-41b0-aa0f-0bb41311ad7d",
            "1146c4bd-8317-421d-b231-ebcb0eff5721",
            "ee86edbe-8dd9-497a-a24c-fa516272404e",
            "13fedea6-df65-4996-9280-9cedb29d5f94",
            "b96c747c-3d87-49a0-b2bb-264f7c11b216",
            "2457e2b5-2a2a-4489-9eac-adb5cebfd9b8",
            "ecf8cc46-eac4-4c36-a422-ed2cca054451",
            "cbd900b3-1684-4f0d-977a-5a5b2a20aff3",
            "26e69b2d-1c6d-47ea-af87-47fa9cfbdf56",
            "cb822004-fe61-4bd8-91b8-d45b2acf0576",
            "efdc4616-d5e4-4dce-b49c-941c07a9ac4b",
            "43b2d3b6-c6aa-4441-b665-3932542c711c",
            "6980d61a-f1fa-491f-8409-409e295a4b03",
            "e197edf1-7913-4c71-bf9f-78feec182413",
            "a3104ba4-9a8b-4f2a-ad89-25f36d3b9595",
            "c0487639-ff5b-4e90-a0b3-9fe411676c2c",
            "402ef4da-a4e3-4503-ab08-9a4aa56821b5",
            "3b939fe5-bf07-416e-b626-9b4dcfb5abc4",
            "94bfa868-4e02-4b90-841b-817c34132524",
            "8a295383-3e95-42dc-b126-f5d5d4d9927a",
            "afe087c6-fdaf-4e79-b087-b5329772ae68",
            "139ade48-e995-4c51-9c31-2edc9475f16e",
            "3b14aac5-20b3-4de0-9a04-adc1cc273aec",
            "2be9c7d5-be12-439a-8968-ad057c67187a",
            "71517390-0244-456d-87c4-82c582ca8abf",
            "f1b860db-be5a-41ed-a67b-b7b0181ec59f",
            "d548e856-41b8-49c8-a801-044c518c9fe5",
            "83f01298-2804-4599-8deb-99728a5d557a",
            "0b17f7b9-11d1-4229-931e-966fb51d1ba9",
            "eb50f34f-bfa8-4e16-9ad9-d114eb1d34d9",
            "96325b08-db02-4f4f-a7a3-7510a746dbe2",
            "5a1044bb-eec6-47e0-932c-1a000fc67e20",
            "48a240ac-2fc8-4208-bd39-82f2c3d27cb4",
            "2ed71a30-e220-47b0-b0e7-1bc14fce30c0",
            "ea515dbf-689d-48fb-bfb8-93f8853d7ec0",
            "899c3027-a75e-4a44-9144-10a53c6a2c11",
            "e1dd94ae-aa5a-4f89-b959-f2ec61771796",
            "fcd2d991-afe0-4c4f-a9fe-760a139ae1f3",
            "d0bc06f8-edea-49a0-bdbb-c1bef0d073bd",
            "6c5aa9dd-7698-4690-bd9e-644763376917",
            "5fbdea23-a3bd-48e3-9bb9-c7ca69fd9aa2",
            "44b9891c-fe65-4aa6-8ac6-b623709b7c02",
            "904db18b-f9e4-4135-accd-8cab1b7efd09",
            "a29d7b5a-3989-43f1-8efa-86ef82101f43",
            "c477f25f-108c-44a4-88a0-7be0b1a8f442",
            "1c542776-d859-4f7e-889a-d3f2c5b93f45",
            "f05fc49e-c44c-4e93-b1f0-a05de793c5bd",
            "6770e597-215e-480b-b658-f449f175ed3c",
            "d3696e4f-8789-4401-af6c-2f073d356228",
            "5dbd715a-2e96-4062-9cda-4e181e63af5e",
            "1e5df2e7-ee0b-4037-ab62-15139a784f28",
            "10c1e1fe-bf0e-4f71-b1f2-173539570a03",
            "bd2b6b7e-15fe-4593-9be0-b9cb97312af0",
            "106e396c-5cd1-4e4b-a70c-30ba85edca56",
            "9a0f90cc-6905-4660-8751-556567fcd897",
            "1b4aabcd-82e1-426e-b2cd-5f1a6cfa8e60",
            "e6a35ae0-352c-42a0-9c74-633d5c76667f",
            "e2db6936-0727-4a61-bd9e-8712c9355a28",
            "02d273f3-3937-4a5b-86af-fbaa7082fc98",
            "5eb58f1d-da3c-4ebe-aff3-c98a60cca1a7",
            "289db939-0630-4d39-8987-cd9042ba485d",
            "5b32901d-2e27-4970-ba74-be06a103aa30",
            "4f03abce-5ffe-4575-9601-52e18b342ca2",
            "4a738092-15a0-42a9-8178-c62e1f86c80c",
            "f6be37ea-b1ea-4d12-902e-1e55a74f3c28",
            "66d100a7-32a0-4479-9f62-57e81c004eb6",
            "b7131d5c-8602-4af3-82a7-7c00e59ad384",
            "2d35c52b-5348-43d8-baf3-741d0b68c7ff",
            "8f46fba9-ba8b-4eaf-bb5f-2370fa61981b",
            "3b6d2215-7c30-4151-b9f1-7d1dc6e9d0de",
            "b41d10e9-7c12-482e-a1ff-612580407bc1",
            "5080976c-532d-492c-9735-9abf7dc903ae",
            "a0e8b380-dc71-4c5e-9564-5a6a96d413b0",
            "c70aafee-9819-4bd7-9b37-69e9f016666b",
            "2f06e164-6745-4c46-9402-92f51f9f9266",
            "b2086806-a259-48af-adcb-172245e66aa0",
            "0dfb5c8c-d986-4536-97a3-b3f543cfd7fa",
            "14d06bc1-b112-4b2f-a0a3-67a8dd9c958c",
            "4f68e8c3-ce07-490a-ad1e-1605c992a0ab",
            "f2023690-0f94-491a-ac9b-9c913f18d32c",
            "48c65d67-f77e-4b0b-b90a-83ab75bd68a9",
            "fc7b0093-a386-4cfb-9e24-ebd1f41fa3fa",
            "1e648ce1-cc7e-4997-bf6e-9a33d2ac504d",
            "e105eeaa-e8c4-4f5c-b412-90c65bdf217a",
            "d5db2d0f-24c4-4bf6-a1d3-fc170bfb1b75",
            "b4ae7d5c-1d56-46c7-a0d9-9af16a5bad5f",
            "13e1fda6-ad15-4061-a10e-d4a621970eb7",
            "29483c03-d3f3-426c-bd91-6dba06c1c86f",
            "5731e795-bc6e-4f67-a20f-e1ea328ebb4e",
            "ffc91cd7-ce2e-43bd-83f9-dd500633c0a2",
            "50856007-ed7d-41fb-8551-374ecae3e24b",
            "69b8fd2c-ca44-4dcb-84cc-49ed820592d4",
            "cbbee582-eb1d-4f69-a297-e10ba2cd83ab",
            "e3f32187-64e1-4609-b294-74d479b50a70",
            "dadb2eed-6939-4a7d-9afa-46a0514a66be",
            "7933074e-4123-4c04-8235-24ded3b719ed",
            "3e515719-4b1e-4dc7-9955-45485e25e7d3",
            "c793f95d-c3c9-4e23-a753-d7b7871c3bbf",
            "f0479f5d-620b-453a-b476-4c9e9418b846",
            "020f0e91-0de0-4617-bb97-e4863949153d",
            "6dc44543-880c-4829-bd86-818b80f5aac6",
            "0cb787c7-79fb-4e4c-a8f2-c95bfa483953",
            "4e04587c-419b-4bb3-bcb4-efe6a43e35e9",
            "46b28c54-a7e1-4286-9bdc-69ae87c3bad3",
            "5e61d351-5c67-4222-b553-e5a42137412d",
            "e819fb9f-77e3-490d-9b3b-288189045e39",
            "b1cbbef7-66d3-49c3-aaff-f598af5cdf47",
            "05715f55-0a2a-4c15-8aa1-b8c1e8aa98a4",
            "f0a4483b-95d9-4c82-8e41-15c96d864674",
            "2dfdecd0-c228-4dc2-941d-0a4e53390d1c",
            "2172f363-6ba3-4c7d-b75a-95189cc14546",
            "6f1bdf3d-1474-4baa-98bd-f39758d46389",
            "03d0218f-3acf-4c09-8902-6b09a4f35be4",
            "5291840b-1ac0-4473-9bc3-691467a51c05",
            "83d53c9b-bf14-42a2-8fb8-238a2fcb905a",
            "8e4180b2-04a8-47ee-8473-9c3c632e261a",
            "10708491-24c3-48f4-b554-d2665157037f"
          ],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_time": 1550521908832,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "ad527dc6-d4a7-420b-9234-94d0b9bfb560",
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_time": 1570604640000,
          "parent_id": "204dd4d3-a72c-4a9e-ba37-ebd5fc5ba989",
          "parent_table": "block",
          "permissions": [
            {
              "allow_search_engine_indexing": false,
              "role": "comment_only",
              "type": "public_permission"
            }
          ],
          "properties": {
            "title": [
              [
                "Essential C++"
              ]
            ]
          },
          "type": "page",
          "version": 634
        }
      },
      "b686a442-7762-481c-acf4-419605acb69d": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_time": 1550521956461,
          "id": "b686a442-7762-481c-acf4-419605acb69d",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_time": 1550796540000,
          "parent_id": "317f96c5-1a28-4c9a-b5e0-bf64625f5d70",
          "parent_table": "block",
          "properties": {
            "language": [
              [
                "C++"
              ]
            ],
            "title": [
              [
                "constexpr long long factorial(long long n)\n{\n  if (n == 0)\n    return 1;\n  else\n    return n * factorial(n - 1);\n}"
              ]
            ]
          },
          "type": "code",
          "version": 3
        }
      },
      "cbd900b3-1684-4f0d-977a-5a5b2a20aff3": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "content": [
            "84025d8d-112c-40b0-aa9d-78fd6354543e",
            "2df35414-a613-4a43-af90-f5870af6073a",
            "932314c3-723c-40da-b090-2255fe2fd0b3",
            "42f56e28-6f13-440e-b77a-5cad482de401",
            "7bf3c1d0-858b-4d04-bb69-9892cc99449b",
            "317f96c5-1a28-4c9a-b5e0-bf64625f5d70",
            "f64d5973-fc6f-46cf-97da-23010fecf04e",
            "cca58910-7b7a-499e-9e72-75427a994f97",
            "43daf6fc-9628-41e5-bd4e-4dbb5a753763",
            "83fa9624-e857-477c-9c51-cba9b67bd166",
            "2b766d8e-3221-4eaa-9fa9-c8f6e9276050",
            "26da7d82-9ade-499e-8479-a5f81eca6fb4",
            "bd18f393-1023-4509-898e-2ad2b36171be",
            "a790bbde-4f65-423d-9ec3-8a815b756843"
          ],
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_time": 1550521920000,
          "format": {
            "page_full_width": true,
            "page_small_text": true
          },
          "id": "cbd900b3-1684-4f0d-977a-5a5b2a20aff3",
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_time": 1552346580000,
          "parent_id": "ad527dc6-d4a7-420b-9234-94d0b9bfb560",
          "parent_table": "block",
          "permissions": [
            {
              "role": "editor",
              "type": "user_permission",
              "user_id": "bb760e2d-d679-4b64-b2a9-03005b21870a"
            }
          ],
          "properties": {
            "title": [
              [
                "Metaprogramming"
              ]
            ]
          },
          "type": "page",
          "version": 64
        }
      },
      "d06a3f17-1c0c-441d-a01a-f2f6c770d8ad": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_by_table": "notion_user",
          "created_time": 1550521956461,
          "id": "d06a3f17-1c0c-441d-a01a-f2f6c770d8ad",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_by_table": "notion_user",
          "last_edited_time": 1550796540000,
          "parent_id": "317f96c5-1a28-4c9a-b5e0-bf64625f5d70",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "Since C++17 one can use fold expression to calculate factorial:"
              ]
            ]
          },
          "type": "text",
          "version": 8
        }
      },
      "d2aced3f-d18b-4647-b678-c6d5fca8a2c4": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_time": 1550521956456,
          "id": "d2aced3f-d18b-4647-b678-c6d5fca8a2c4",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_time": 1550796480000,
          "parent_id": "317f96c5-1a28-4c9a-b5e0-bf64625f5d70",
          "parent_table": "block",
          "properties": {
            "language": [
              [
                "C++"
              ]
            ],
            "title": [
              [
                "#include \u003ciostream\u003e\n\ntemplate\u003cunsigned int n\u003e\nstruct factorial\n{\n    enum\n    {\n        value = n * factorial\u003cn - 1\u003e::value\n    };\n};\n\ntemplate\u003c\u003e\nstruct factorial\u003c0\u003e\n{\n    enum { value = 1 };\n};\n\nint main()\n{\n    std::cout \u003c\u003c factorial\u003c7\u003e::value \u003c\u003c std::endl;    // prints \"5040\"\n}"
              ]
            ]
          },
          "type": "code",
          "version": 3
        }
      },
      "d77665c4-47ee-43bd-90de-d1b3f0e69c0f": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_time": 1550521956459,
          "id": "d77665c4-47ee-43bd-90de-d1b3f0e69c0f",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_time": 1550521956459,
          "parent_id": "317f96c5-1a28-4c9a-b5e0-bf64625f5d70",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "Automatic arrays must have a compile-time defined size. And the result of a metafunction is a compile-time constant, so it can be used here."
              ]
            ]
          },
          "type": "text",
          "version": 1
        }
      },
      "e3af2fec-975c-4b1d-9473-9ae1f06c139b": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_time": 1550521956461,
          "id": "e3af2fec-975c-4b1d-9473-9ae1f06c139b",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_time": 1550796540000,
          "parent_id": "317f96c5-1a28-4c9a-b5e0-bf64625f5d70",
          "parent_table": "block",
          "properties": {
            "language": [
              [
                "C++"
              ]
            ],
            "title": [
              [
                "constexpr long long factorial(int n)\n{\n  long long result = 1;\n  for (int i = 1; i \u003c= n; ++i) {\n    result *= i;\n  }\n  return result;\n}"
              ]
            ]
          },
          "type": "code",
          "version": 3
        }
      },
      "e4b00d04-8a34-4fa2-9336-2ffba1584588": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_time": 1550521956459,
          "id": "e4b00d04-8a34-4fa2-9336-2ffba1584588",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_time": 1550796480000,
          "parent_id": "317f96c5-1a28-4c9a-b5e0-bf64625f5d70",
          "parent_table": "block",
          "properties": {
            "language": [
              [
                "C++"
              ]
            ],
            "title": [
              [
                "int my_array[factorial\u003c5\u003e::value];"
              ]
            ]
          },
          "type": "code",
          "version": 3
        }
      },
      "ff92ca2c-1671-45de-b575-82d3d236f4c9": {
        "role": "comment_only",
        "value": {
          "alive": true,
          "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "created_time": 1550521956460,
          "id": "ff92ca2c-1671-45de-b575-82d3d236f4c9",
          "ignore_block_count": true,
          "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "last_edited_time": 1550521956460,
          "parent_id": "317f96c5-1a28-4c9a-b5e0-bf64625f5d70",
          "parent_table": "block",
          "properties": {
            "title": [
              [
                "Since C++11, the "
              ],
              [
                "std::integral_constant",
                [
                  [
                    "c"
                  ]
                ]
              ],
              [
                " template can be used for this kind of template computation:"
              ]
            ]
          },
          "type": "text",
          "version": 1
        }
      }
    },
    "notion_user": {
      "bb760e2d-d679-4b64-b2a9-03005b21870a": {
        "role": "reader",
        "value": {
          "clipper_onboarding_completed": true,
          "email": "kkowalczyk@gmail.com",
          "family_name": "Kowalczyk",
          "given_name": "Krzysztof",
          "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
          "mobile_onboarding_completed": true,
          "onboarding_completed": true,
          "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
          "version": 231
        }
      }
    },
    "space": {}
  }
}
